// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkspaceRole {
  OWNER
  MEMBER
  VIEWER
}

enum BoardRole {
  ADMIN
  MEMBER
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 权限关联
  ownedWorkspaces  Workspace[] @relation("WorkspaceOwner")
  workspaceMembers WorkspaceMember[]
  boardMembers     BoardMember[]
  assignedCards    Card[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  owner   User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members WorkspaceMember[]
  boards  Board[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Board {
  id          String   @id @default(cuid())
  name        String
  description String?
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  workspace Workspace     @relation(fields: [workspaceId], references: [id])
  members   BoardMember[]
  lists     List[]

  @@map("boards")
}

model BoardMember {
  id       String    @id @default(cuid())
  userId   String
  boardId  String
  role     BoardRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id])
  board Board @relation(fields: [boardId], references: [id])

  @@unique([userId, boardId])
  @@map("board_members")
}

model List {
  id        String   @id @default(cuid())
  name      String
  order     Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board @relation(fields: [boardId], references: [id])
  cards Card[]

  @@map("lists")
}

model Card {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  listId      String
  assigneeId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  list     List  @relation(fields: [listId], references: [id])
  assignee User? @relation(fields: [assigneeId], references: [id])

  @@map("cards")
}
